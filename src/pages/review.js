import { useEffect } from 'react'
import Head from 'next/head'
import { dehydrate, QueryClient } from 'react-query'
import { useTranslations } from 'next-intl'

import { MainLayout } from '@/components/Layout'
import { Loader } from '@/components/Loader'
import { RingContainer } from '@/components/RingContainer'
import styles from '@/styles/Home.module.css'
import { Carousel } from '@/features/carousel'
import { MainAccordion } from '@/features/Accordion'
import { AboutCompany } from '@/features/AboutCompanySection'
import { Success } from '@/features/Success'
import { useFormStore } from '@/stores/form'
import { getReviews, useReviews } from '@/api/getReviews'
import { useFormData } from '@/hooks/forms/useGetFormData'
import { getFormData } from '@/services/form'

export default function Review() {
  // const router = useRouter()
  // const id = router.query.id

  // here also we should use dynamic id which we get from props.id who send getServerSideProps
  const { status, isError, data, error } = useReviews('f5847e5a-0068-4424-ac39-0bc3a5e17f21')

  const t = useTranslations('General')

  const { data: form, isLoading: formIsLoading } = useFormData({
    id: 'f5847e5a-0068-4424-ac39-0bc3a5e17f21',
  })
  const isLoading = useFormStore((state) => state.isLoading)
  const isSuccess = useFormStore((state) => state.isSuccess)
  const setIsLoading = useFormStore((state) => state.setIsLoading)
  const setIsSuccess = useFormStore((state) => state.setIsSuccess)
  const resetFormData = useFormStore((state) => state.resetFormData)

  useEffect(() => {
    if (isLoading) {
      const timeout = setTimeout(() => {
        resetFormData()
        setIsLoading(false)
        setIsSuccess(true)
      }, 3000)

      return () => clearTimeout(timeout)
    }
  }, [isLoading])

  return (
    <div className={styles.container}>
      <Head>
        <title>boi | Review</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="flex justify-center w-screen">
        <div className="w-full max-w-2xl pt-16 overflow-hidden">
          {!formIsLoading && <AboutCompany company={form?.company} />}
          {!isLoading && !isSuccess && <Carousel form={form} />}
          <div className="mx-4 mb-8">
            {isLoading && (
              <div className="flex justify-center items-center py-6">
                <RingContainer>
                  <Loader />
                </RingContainer>
              </div>
            )}
            {isSuccess && (
              <div className="flex justify-center items-center py-6">
                <Success />
              </div>
            )}
          </div>
          <MainAccordion
            status={status}
            isError={isError}
            data={data}
            error={error}
            formType={form?.type}
          />
        </div>
      </div>
    </div>
  )
}

Review.getLayout = function getLayout(page) {
  return <MainLayout>{page}</MainLayout>
}

export async function getServerSideProps({ locale }) {
  const queryClient = new QueryClient()
  await queryClient.prefetchQuery(['formData', '0a4a52a1-f4db-4832-9c0b-93478fa58954'], () =>
    getFormData({ id: '0a4a52a1-f4db-4832-9c0b-93478fa58954' })
  )

  await queryClient.prefetchQuery('reviews', () => {
    // here we should put dynamic id extracted from context
    getReviews('0a4a52a1-f4db-4832-9c0b-93478fa58954')
  })

  return {
    props: {
      textContent: (await import(`../../locales/${locale}.json`)).default,
      dehydratedState: JSON.parse(JSON.stringify(dehydrate(queryClient))),
    },
  }
}
